name: Golden Mill

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Create .env
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > server/.env

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H 77.73.39.210 >> ~/.ssh/known_hosts

      - name: Update code and prepare server
        run: |
          ssh root@77.73.39.210 << 'EOF'
            set -e
            cd /var/www/goldenmill/prod
            
            # Обновляем код
            git fetch origin master
            git reset --hard origin/master
            
            # Очищаем старые сборки
            rm -rf dist server/dist
            
            # Устанавливаем зависимости параллельно
            echo "Installing dependencies..."
            yarn install --prefer-offline &
            cd server && yarn install --prefer-offline && yarn add sharp@0.32.6 --ignore-engines --platform=linux --arch=x64 && cd ..
            wait
            
            echo "Dependencies installed successfully"
          EOF

      - name: Build applications
        run: |
          ssh root@77.73.39.210 << 'EOF'
            set -e
            cd /var/www/goldenmill/prod
            
            # Собираем приложения параллельно
            echo "Building applications..."
            export NODE_ENV=production
            yarn build & 
            yarn build:ssr &
            yarn build:ssr:tsc &
            cd server && yarn build &
            wait
            
            echo "Applications built successfully"
          EOF

      - name: Restart services
        run: |
          ssh root@77.73.39.210 << 'EOF'
            set -e
            
            # Перезапускаем API сервер
            echo "Restarting API server..."
            cd /var/www/goldenmill/prod/server
            if pm2 list | grep -q "goldenmill-server"; then
              echo "goldenmill-server is started... Begin reload"
              pm2 reload goldenmill-server
            else
              echo "goldenmill-server is closed... Begin script"
              pm2 start ecosystem.config.cjs --only goldenmill-server
            fi
            
            # Перезапускаем SSR сервер
            echo "Restarting SSR server..."
            cd /var/www/goldenmill/prod
            if pm2 list | grep -q "goldenmill-ssr"; then
              echo "goldenmill-ssr is started... Begin reload"
              pm2 reload goldenmill-ssr
            else
              echo "goldenmill-ssr is closed... Begin script"
              pm2 start ecosystem.config.cjs --only goldenmill-ssr
            fi
            
            echo "Services restarted"
          EOF

      - name: Verify deployment
        run: |
          ssh root@77.73.39.210 << 'EOF'
            set -e
            echo "Checking process status..."
            sleep 3
            pm2 list
            
            # Запускаем мониторинг в фоновом режиме
            echo "Starting PM2 monitoring..."
            pm2 monit > /dev/null 2>&1 &
            MONIT_PID=$!
            
            # Функция для очистки и выхода
            cleanup() {
              echo "Cleaning up..."
              kill $MONIT_PID 2>/dev/null || true
              exit $1
            }
            
            # Устанавливаем обработчик для корректного завершения
            trap 'cleanup 1' ERR INT TERM
            
            # Функция для проверки доступности сервиса
            check_service() {
              local url=$1
              local service_name=$2
              local max_attempts=5
              local attempt=1
              
              echo "Checking $service_name availability..."
              while [ $attempt -le $max_attempts ]; do
                echo "Attempt $attempt for $service_name..."
                if curl -f "$url"; then
                  echo "$service_name is responding!"
                  return 0
                fi
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "$service_name failed to respond after $max_attempts attempts"
                  echo "$service_name logs:"
                  if [ "$service_name" = "API Server" ]; then
                    pm2 logs goldenmill-server --lines 50
                  else
                    pm2 logs goldenmill-ssr --lines 50
                  fi
                  return 1
                fi
                
                echo "Waiting 7 seconds before next attempt..."
                sleep 7
                attempt=$((attempt + 1))
              done
            }
            
            # Проверяем API сервер
            if ! check_service "http://localhost:3002" "API Server"; then
              cleanup 1
            fi
            
            # Проверяем SSR сервер
            if ! check_service "http://localhost:3005" "SSR Server"; then
              cleanup 1
            fi
            
            echo "Deployment completed successfully!"
            echo "Deployed commit: $(git rev-parse HEAD)"
            cleanup 0
          EOF